<!-- ---
import { Image } from 'astro:assets';
import { render, type CollectionEntry, type CollectionKey } from 'astro:content';
import type { HTMLTag, Polymorphic } from 'astro/types';

import { cn } from '../../../utils'; // Assuming this utility exists
import { Button, FormattedDate, Icon } from '../../user'; // Assuming these components exist

// Define simplified props, assuming 'detailed' is the primary use case here
type Props = {
  post: CollectionEntry<CollectionKey>;
  class?: string;
};

const { post, class: className } = Astro.props;
const { id, data } = post;
const { remarkPluginFrontmatter } = await render(post);
const postDate = data.updatedDate ?? data.publishDate;
const hasImage = !!data.heroImage;
---

<article
  class={cn(
    'post-preview group relative flex cursor-pointer flex-col overflow-hidden rounded-xl border bg-card text-card-foreground shadow-sm transition-all duration-300 ease-in-out hover:shadow-md dark:border-slate-800 dark:bg-slate-900 dark:hover:border-slate-700', // Added cursor-pointer
    // Add classes based on whether there's an image for layout adjustments
    hasImage ? 'md:grid md:grid-cols-5 md:gap-0' : 'p-5', // Grid layout only if image exists on medium+ screens, reduced padding for no-image
    className
  )}
>
  {/* Link now wraps the entire visual card content */}
  <a href={`/blog/${id}`} class="absolute inset-0 z-10" data-astro-prefetch>
    <span class="sr-only">Read more about {data.title}</span>
  </a>

  {/* Image Section (Conditional) */}
  {hasImage && (
    <div class="relative overflow-hidden md:col-span-2">
      {/* Aspect ratio container for consistent image height */}
      <div class="aspect-video md:aspect-auto md:h-full">
        <Image
          alt={data.heroImage.alt || data.title}
          class="h-full w-full object-cover transition-transform duration-300 ease-in-out group-hover:scale-105"
          loading="lazy"
          {...data.heroImage}
        />
      </div>
    </div>
  )}

  {/* Text Content Section */}
  <div
    class={cn(
      'relative z-20 flex flex-grow flex-col p-5', // Reduced padding to p-5
      hasImage ? 'md:col-span-3' : '' // Takes remaining space if image exists
    )}
  >
    {/* Metadata */}
    <div class="mb-2 flex items-center gap-x-3 text-xs text-muted-foreground"> {/* Reduced mb-3 to mb-2, gap-x-4 to gap-x-3 */}
      <FormattedDate date={postDate} />
      <span class="flex items-center gap-1">
        <Icon name="time" class="size-3.5" />
        {remarkPluginFrontmatter.minutesRead}
      </span>
      {data.language && (
        <span class="flex items-center gap-1">
          <Icon name="earth" class="size-3.5" />
          {data.language}
        </span>
      )}
    </div>

    {/* Title */}
    {/* Kept font size the same to maintain hierarchy, reduced margin below */}
    <h2 class="mb-1.5 text-lg font-semibold leading-snug text-foreground transition-colors group-hover:text-primary md:text-xl"> {/* Reduced mb-2 to mb-1.5 */}
      {data.draft && <span class="mr-1 text-red-500">(Draft)</span>}
      {data.title}
    </h2>

    {/* Description */}
    {/* Reduced margin below, kept line-clamp */}
    <p class="mb-3 line-clamp-3 flex-grow text-sm text-muted-foreground"> {/* Reduced mb-4 to mb-3 */}
      {data.description}
    </p>

    {/* Tags & Footer Elements */}
    <div class="mt-auto pt-1"> {/* Reduced pt-2 to pt-1 */}
      {data.tags && data.tags.length > 0 && (
        <ul class="tag-list mb-1 flex flex-wrap gap-1.5"> {/* Reduced mb-2 to mb-1, gap-2 to gap-1.5 */}
          {data.tags.map((tag: string) => (
            <li>
              {/* Adjusted tag padding for smaller look */}
              <span class="inline-block rounded-full border bg-muted px-2 py-0.5 text-xs font-medium text-muted-foreground dark:border-slate-700 dark:bg-slate-800"> {/* Reduced px-2.5 to px-2 */}
                {tag}
              </span>
            </li>
          ))}
        </ul>
      )}
      {/* Read more indicator */}
      {/* Reduced margin top */}
      <div class="mt-1 flex items-center text-xs font-medium text-primary opacity-0 transition-opacity duration-200 group-hover:opacity-100"> {/* Reduced mt-2 to mt-1 */}
        Read more <Icon name="arrow-right" class="ml-1 size-3.5" />
      </div>
    </div>
  </div>
</article>

<style>
  /* Custom focus style */
  .post-preview a:focus-visible {
    outline: 2px solid hsl(var(--primary));
    outline-offset: 4px;
    border-radius: theme('borderRadius.xl'); /* Match card rounding */
  }
</style> -->

---
import { Image } from 'astro:assets'
import { render, type CollectionEntry, type CollectionKey } from 'astro:content'
import type { HTMLTag, Polymorphic } from 'astro/types'

import { cn } from '../../../utils'
import { Button, FormattedDate, Icon } from '../../user'

type Props<Tag extends HTMLTag> = Polymorphic<{ as: Tag }> & {
  post: CollectionEntry<CollectionKey>
  detailed?: boolean
  class?: string
}

const { as: Tag = 'div', post, detailed = false, class: className } = Astro.props

const { id, data } = post

const { remarkPluginFrontmatter } = await render(post)
const postDate = data.updatedDate ?? data.publishDate
---

<li
  class={cn(
    'post-preview group/card flex flex-col relative rounded-2xl border transition-colors ease-in-out px-5 py-2.5 hover:bg-muted',
    detailed && 'max-sm:px-4 sm:py-5',
    className
  )}
  style={detailed &&
    data.heroImage?.color &&
    `--preview-highlight:color-mix(in srgb,${data.heroImage.color} 40%,hsl(var(--foreground)/var(--un-text-opacity,1)));
    --preview-highlight-bg:hsl(from ${data.heroImage.color} h s l/20%)`}
>
  <a
    class={cn(
      'group/link w-full flex flex-col transition-all hover:text-primary',
      !detailed && 'sm:flex-row',
      detailed && data.heroImage && 'max-md:pt-24'
    )}
    href={`/blog/${id}`}
    data-astro-prefetch
  >
    {
      detailed && data.heroImage && (
        <Image
          alt={data.heroImage.alt || data.title}
          class='cover-image absolute end-0 top-0 z-0 h-2/3 w-full rounded-2xl object-cover opacity-50 transition-opacity duration-300 group-hover/card:opacity-70 md:h-full md:w-3/5'
          loading='eager'
          {...data.heroImage}
        />
      )
    }

    <FormattedDate class='min-w-[95px] py-1 text-xs' date={postDate} />

    <Tag class='z-10 flex-grow'>
      {/* title */}
      <div class='flex justify-between'>
        <div class={detailed && 'font-medium'}>
          {data.draft && <span class='text-red-500'>(Draft) </span>}
          {data.title}
        </div>
        <svg
          xmlns='http://www.w3.org/2000/svg'
          width='16'
          height='16'
          viewBox='0 0 24 24'
          fill='none'
          stroke-width='2.5'
          stroke-linecap='round'
          stroke-linejoin='round'
          class='preview-redirect my-1 stroke-muted-foreground group-hover/link:stroke-primary'
          ><line
            x1='5'
            y1='12'
            x2='19'
            y2='12'
            class='translate-x-4 scale-x-0 transition-all duration-300 ease-in-out group-hover/link:translate-x-1 group-hover/link:scale-x-100'
          ></line><polyline
            points='12 5 19 12 12 19'
            class='translate-x-0 transition-all duration-300 ease-in-out group-hover/link:translate-x-1'
          ></polyline></svg
        >
      </div>
      {
        (
          <>
            {/* desc */}
            <p
              class={cn(
                'line-clamp-2 pt-1 text-sm text-muted-foreground sm:line-clamp-3',
                data.heroImage && 'sm:me-24'
              )}
            >
              {data.description}
            </p>
            <div class='flex items-center gap-2 py-1.5 text-sm italic leading-4 text-muted-foreground sm:py-3'>
              {/* reading time */}
              <span class='flex items-center gap-1'>
                <Icon name='time' class='size-4' />
                {remarkPluginFrontmatter.minutesRead}
              </span>
              {/* language */}
              {data.language && (
                <span class='flex items-center gap-1'>
                  <Icon name='earth' class='size-4' />
                  {data.language}
                </span>
              )}
            </div>
          </>
        )
      }
    </Tag>
  </a>
  <!-- tags -->
  {
    detailed && data.tags && (
      <ul class='tag-list mt-1 flex flex-wrap gap-2'>
        {data.tags.map((tag: string) => (
          <li>
            <Button title={tag} href={`/tags/${tag}`} style='pill' />
          </li>
        ))}
      </ul>
    )
  }
</li>

<style>
  .post-preview {
    --preview-highlight-final: var(
      --preview-highlight,
      hsl(var(--primary) / var(--un-text-opacity, 1))
    );
  }
  .post-preview:hover {
    &,
    & .tag-list a {
      background-color: var(
        --preview-highlight-bg,
        hsl(var(--muted) / var(--un-bg-opacity, 1))
      ) !important;
    }
    & > a,
    & .tag-list a:hover {
      color: var(--preview-highlight-final) !important;
    }
    & > a .preview-redirect {
      stroke: var(--preview-highlight-final) !important;
    }
  }
  .cover-image {
    mask-image: linear-gradient(to right, rgba(0, 0, 0, 0) 0%, rgba(0, 0, 0, 1) 100%);
    -ms-mask-image: -ms-linear-gradient(to right, rgba(0, 0, 0, 0) 0%, rgba(0, 0, 0, 1) 100%);
    -webkit-mask-image: -webkit-linear-gradient(
      to right,
      rgba(0, 0, 0, 0) 0%,
      rgba(0, 0, 0, 1) 100%
    );
  }

  @media (max-width: 768px) {
    .cover-image {
      mask-image: linear-gradient(to top, rgba(0, 0, 0, 0) 0%, rgba(0, 0, 0, 1) 100%);
      -ms-mask-image: -ms-linear-gradient(to top, rgba(0, 0, 0, 0) 0%, rgba(0, 0, 0, 1) 100%);
      -webkit-mask-image: -webkit-linear-gradient(
        to top,
        rgba(0, 0, 0, 0) 0%,
        rgba(0, 0, 0, 1) 100%
      );
    }
  }
</style>
